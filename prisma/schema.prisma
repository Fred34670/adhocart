generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model archivage {
  id            Int       @id(map: "pk_archivage") @unique(map: "archivage_id_archivage_key") @default(autoincrement()) @db.SmallInt
  nom_archivage String?
  article       article[]
}

model article {
  id                  Int             @id(map: "pk_article") @default(autoincrement())
  archivage_id        Int?            @db.SmallInt
  categorie_id        Int?            @db.SmallInt
  nom_auteur          String?
  prenom_auteur       String?
  titre               String?
  illustrations       String?
  editeur             String?
  date_impression     String?
  nombre_pages        String?
  description         String?
  prix_achat          Decimal?        @db.Decimal
  valeur_marche_min   Decimal?        @db.Decimal
  prix_vente_internet Decimal?        @db.Decimal
  quantite_volume     Int?            @db.SmallInt
  poids_net_kg        String?
  frais_postaux       Decimal?        @db.Decimal
  date_creation       DateTime?       @db.Date
  date_vente          DateTime?       @db.Date
  nom_complet         String?
  pseudo_titre        String?
  collection          String?
  justification       String?
  date_EO             String?
  estimation          String?
  prix_reserve        Decimal?        @db.Decimal
  disponible          Choix?
  envoi_possible      Choix?
  edition_papier_id   Int?            @db.SmallInt
  id_utilisateur      Int?            @db.SmallInt
  conversations       Conversation[]
  archivage           archivage?      @relation(fields: [archivage_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categorie           categorie?      @relation(fields: [categorie_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  edition_papier      edition_papier? @relation(fields: [edition_papier_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  utilisateur         utilisateur?    @relation(fields: [id_utilisateur], references: [id], onDelete: NoAction, onUpdate: NoAction)
  article_theme       article_theme[]
  favoris             favoris[]
  photos              photos[]
}

model article_theme {
  article_id Int
  theme_id   Int     @db.SmallInt
  article    article @relation(fields: [article_id], references: [id], onUpdate: Restrict)
  theme      theme   @relation(fields: [theme_id], references: [id], onUpdate: Restrict)

  @@id([article_id, theme_id], map: "pk_article_theme")
}

model categorie {
  id               Int               @id(map: "pk_categorie") @default(autoincrement()) @db.SmallInt
  nom_categorie    String
  image_url        String?
  image_entete_url String?
  description      String?
  article          article[]
  categorie_theme  categorie_theme[]
}

model categorie_theme {
  categorie_id Int       @db.SmallInt
  theme_id     Int       @db.SmallInt
  categorie    categorie @relation(fields: [categorie_id], references: [id], onUpdate: Restrict)
  theme        theme     @relation(fields: [theme_id], references: [id], onUpdate: Restrict)

  @@id([categorie_id, theme_id], map: "pk_categorie_theme")
}

model edition_papier {
  id                     Int       @id @default(autoincrement()) @db.SmallInt
  libelle_edition_papier String?
  article                article[]
}

model favoris {
  utilisateur_id Int         @db.SmallInt
  article_id     Int
  article        article     @relation(fields: [article_id], references: [id], onUpdate: Restrict)
  utilisateur    utilisateur @relation(fields: [utilisateur_id], references: [id], onUpdate: Restrict)

  @@id([utilisateur_id, article_id], map: "pk_favoris")
}

model photos {
  id            Int     @id(map: "pk_photos") @default(autoincrement())
  article_id    Int
  libelle_photo String
  url_photo     String?
  a_la_une      Choix?  @default(Non)
  article       article @relation(fields: [article_id], references: [id], onUpdate: Restrict)
}

model theme {
  id              Int               @id(map: "pk_theme") @default(autoincrement()) @db.SmallInt
  libelle_theme   String?
  article_theme   article_theme[]
  categorie_theme categorie_theme[]
}

model type_utilisateur {
  id                   Int           @id(map: "pk_typeutilisateur") @default(autoincrement()) @db.SmallInt
  nom_type_utilisateur String
  utilisateur          utilisateur[]
}

model utilisateur {
  id                   Int              @id(map: "pk_utilisateur") @default(autoincrement()) @db.SmallInt
  type_utilisateur_id  Int              @db.SmallInt
  email                String           @unique(map: "ak_cle_1_utilisat")
  nom                  String?
  prenom               String?
  password             String?
  adresse              String?
  code_postal          String?
  ville                String?
  telephone            String?
  role                 Role?            @default(USER)
  passwordResetToken   String?          @unique
  passwordResetExpires DateTime?        @db.Timestamptz(6)
  conversations        Conversation[]
  article              article[]
  favoris              favoris[]
  type_utilisateur     type_utilisateur @relation(fields: [type_utilisateur_id], references: [id], onUpdate: Restrict, map: "fk_utilisat_est_de_ty_typeutil")
}

model Conversation {
  id            Int          @id @default(autoincrement())
  articleId     Int
  userId        Int?         @db.SmallInt
  guestName     String?
  guestEmail    String?
  isClosed      Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  isReadByAdmin Boolean      @default(false)
  isReadByUser  Boolean      @default(false)
  gestToken     String?      @unique
  article       article      @relation(fields: [articleId], references: [id])
  user          utilisateur? @relation(fields: [userId], references: [id])
  messages      Message[]
}

model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int
  senderIsAdmin  Boolean
  content        String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Choix {
  Oui
  Non
}
